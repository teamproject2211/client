//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.17929
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.OurServer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OurServer.IGameServer", CallbackContract=typeof(Client.OurServer.IGameServerCallback))]
    public interface IGameServer {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/Login")]
        void Login(string name, string pass);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/Login")]
        System.Threading.Tasks.Task LoginAsync(string name, string pass);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/Registration")]
        void Registration(string name, string pass);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/Registration")]
        System.Threading.Tasks.Task RegistrationAsync(string name, string pass);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/EnterRoom")]
        void EnterRoom(string roomName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/EnterRoom")]
        System.Threading.Tasks.Task EnterRoomAsync(string roomName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/MakeMove")]
        void MakeMove(int KeyCode, string roomName, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/MakeMove")]
        System.Threading.Tasks.Task MakeMoveAsync(int KeyCode, string roomName, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/LeaveRoom")]
        void LeaveRoom(string roomName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/LeaveRoom")]
        System.Threading.Tasks.Task LeaveRoomAsync(string roomName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/CreateRoom")]
        void CreateRoom(string roomName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/CreateRoom")]
        System.Threading.Tasks.Task CreateRoomAsync(string roomName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/StartGame")]
        void StartGame(string roomName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(string roomName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/UpdateMap")]
        void UpdateMap(byte[][] map);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/RecieveMessage")]
        void RecieveMessage(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/LoginSuccess")]
        void LoginSuccess();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/UpdateUsersCount")]
        void UpdateUsersCount(int count);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/UpdateRooms")]
        void UpdateRooms(string[] rooms);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/RoomEnterSuccessful")]
        void RoomEnterSuccessful();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/RoomLeaveSuccessful")]
        void RoomLeaveSuccessful();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/UpdatePlayersList")]
        void UpdatePlayersList(string[] names);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/IsAdmin")]
        void IsAdmin(bool IsEnabled);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameServer/GameStartSuccess")]
        void GameStartSuccess();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServerChannel : Client.OurServer.IGameServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServerClient : System.ServiceModel.DuplexClientBase<Client.OurServer.IGameServer>, Client.OurServer.IGameServer {
        
        public GameServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string name, string pass) {
            base.Channel.Login(name, pass);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string name, string pass) {
            return base.Channel.LoginAsync(name, pass);
        }
        
        public void Registration(string name, string pass) {
            base.Channel.Registration(name, pass);
        }
        
        public System.Threading.Tasks.Task RegistrationAsync(string name, string pass) {
            return base.Channel.RegistrationAsync(name, pass);
        }
        
        public void EnterRoom(string roomName, string pass) {
            base.Channel.EnterRoom(roomName, pass);
        }
        
        public System.Threading.Tasks.Task EnterRoomAsync(string roomName, string pass) {
            return base.Channel.EnterRoomAsync(roomName, pass);
        }
        
        public void MakeMove(int KeyCode, string roomName, int id) {
            base.Channel.MakeMove(KeyCode, roomName, id);
        }
        
        public System.Threading.Tasks.Task MakeMoveAsync(int KeyCode, string roomName, int id) {
            return base.Channel.MakeMoveAsync(KeyCode, roomName, id);
        }
        
        public void LeaveRoom(string roomName) {
            base.Channel.LeaveRoom(roomName);
        }
        
        public System.Threading.Tasks.Task LeaveRoomAsync(string roomName) {
            return base.Channel.LeaveRoomAsync(roomName);
        }
        
        public void CreateRoom(string roomName, string pass) {
            base.Channel.CreateRoom(roomName, pass);
        }
        
        public System.Threading.Tasks.Task CreateRoomAsync(string roomName, string pass) {
            return base.Channel.CreateRoomAsync(roomName, pass);
        }
        
        public void StartGame(string roomName) {
            base.Channel.StartGame(roomName);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(string roomName) {
            return base.Channel.StartGameAsync(roomName);
        }
    }
}
